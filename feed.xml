<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://zonca.dev/feed.xml" rel="self" type="application/atom+xml" /><link href="https://zonca.dev/" rel="alternate" type="text/html" /><updated>2022-04-07T10:41:22-05:00</updated><id>https://zonca.dev/feed.xml</id><title type="html">Andrea Zonca</title><subtitle>Tutorials and blog posts by Andrea Zonca: Python, Jupyter, Kubernetes</subtitle><entry><title type="html">Science Gateway with Dask and Zarr</title><link href="https://zonca.dev/2022/04/science-gateway-dask-zarr.html" rel="alternate" type="text/html" title="Science Gateway with Dask and Zarr" /><published>2022-04-05T00:00:00-05:00</published><updated>2022-04-05T00:00:00-05:00</updated><id>https://zonca.dev/2022/04/science-gateway-dask-zarr</id><content type="html" xml:base="https://zonca.dev/2022/04/science-gateway-dask-zarr.html">&lt;p&gt;This material was presented on April 2022 at the &lt;a href=&quot;https://sciencegateways.org/minigateways2022&quot;&gt;MiniGateways 2022 conference&lt;/a&gt; organized by the wonderful Science Gateways Community Institute (SGCI). See the &lt;a href=&quot;https://docs.google.com/presentation/d/1TVtrVeFiVfSm2X-XQ7u-O9TBD9tStJ5yWzaQuV0frxU/edit?usp=sharing&quot;&gt;talk slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this tutorial, we will glue several intersting technologies together to show a toy Science Gateway deployment which runs inside Kubernetes, uses Dask to scale up distributed computations across multiple workers and writes output data to Object store using the Zarr format.&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://zonca.dev/2022/03/kubernetes-jetstream2-kubespray.html&quot;&gt;Kubernetes deployment on Jetstream 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Optionally have &lt;a href=&quot;https://zonca.dev/2022/03/jetstream2-jupyterhub.html&quot;&gt;JupyterHub installed as well to interact with the gateway locally&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zonca.dev/2022/04/dask-gateway-jupyterhub.html&quot;&gt;Dask Gateway to handle Dask clusters&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;AWS style credentials for writing to object store, see &lt;a href=&quot;https://zonca.dev/2022/04/zarr-jetstream2.html&quot;&gt;the tutorial about Zarr on Jetstream 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;

&lt;h2 id=&quot;authentication&quot;&gt;Authentication&lt;/h2&gt;

&lt;p&gt;As usual first checkout the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zonca/jupyterhub-deploy-kubernetes-jetstream&lt;/code&gt; repository.&lt;/p&gt;

&lt;p&gt;Dask gateway has been deployed with JupyterHub based autentication, therefore we need to create a Token from the JupyterHub control panel at &lt;a href=&quot;https://jupyterhub-address.edu/hub/token&quot;&gt;https://jupyterhub-address.edu/hub/token&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Request a new token with no expiration named for example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gatewaydaskzarr&lt;/code&gt;, then save it into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_aws_config&lt;/code&gt; file, the same used for the AWS credentials:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jhub_token=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We need to provide AWS credentials both to the gateway application and to the dask workers, so we store them in a Kubernetes Secret:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd gateway-dask-zarr
bash create_secret.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We then configure Dask Gateway so it mounts this secret into the workers, add:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;c.KubeClusterConfig.worker_extra_container_config = {
            &quot;envFrom&quot;: [
                        {&quot;secretRef&quot;: {&quot;name&quot;: &quot;awsconfig&quot;}}
                            ]
                        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask_gateway/config_dask-gateway.yaml&lt;/code&gt; and redeploy Dask Gateway with Helm.&lt;/p&gt;

&lt;h2 id=&quot;deploy-the-gateway&quot;&gt;Deploy the gateway&lt;/h2&gt;

&lt;p&gt;The gateway itself is a toy Flask app, see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gateway.py&lt;/code&gt; file in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gateway-dask-zarr&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;We can create a Kubernetes Deployment with:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl create -f deploy_gateway.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;It pulls the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zonca/gateway-dask-zarr:latest&lt;/code&gt; which has been build with the &lt;a href=&quot;https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream/blob/master/gateway-dask-zarr/Dockerfile&quot;&gt;Dockerfile in the gateway-dask-zarr folder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;It mounts the secret with AWS and JupyterHub credentials&lt;/li&gt;
  &lt;li&gt;In the initialization phase it creates a Dask cluster with 3 workers that will be used for all the jobs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can test that the deployment has been successful by logging in to the JupyterHub deployment on Jetstream and running the first cells of &lt;a href=&quot;https://gist.github.com/9b65ecde689c30f765688c4bbbf93a62&quot;&gt;this notebook on Gist&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;run-jobs&quot;&gt;Run jobs&lt;/h2&gt;

&lt;p&gt;Running the following cells in the test notebook above we can launch a job, every time we send a get request to the URL:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://gateway-svc/submit_job/&amp;lt;job_id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;the gateway:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gets a “Client” instance connected to the Dask cluster&lt;/li&gt;
  &lt;li&gt;Prepares a 1000x1000 Zarr array with 100 chunks of size 100x100&lt;/li&gt;
  &lt;li&gt;Instructs the 3 Dask workers to create a random array distributely&lt;/li&gt;
  &lt;li&gt;Instructs the 3 Dask workers to write that array concurrently to Object Store as a Zarr file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore no computation is executed in the Flask App, it is offloaded to the Dask workers. Data transfer as well directly flows from the workers to Object Store.&lt;/p&gt;

&lt;h2 id=&quot;inspect-the-results&quot;&gt;Inspect the results&lt;/h2&gt;

&lt;p&gt;Finally, in the same notebook, we can access Object Store directly, load and plot the data.&lt;/p&gt;</content><author><name></name></author><category term="kubernetes" /><category term="openstack" /><category term="jetstream2" /><category term="jupyterhub" /><category term="dask" /><summary type="html">This material was presented on April 2022 at the MiniGateways 2022 conference organized by the wonderful Science Gateways Community Institute (SGCI). See the talk slides</summary></entry><entry><title type="html">Use the distributed file format Zarr on Jetstream 2 object storage</title><link href="https://zonca.dev/2022/04/zarr-jetstream2.html" rel="alternate" type="text/html" title="Use the distributed file format Zarr on Jetstream 2 object storage" /><published>2022-04-04T18:00:00-05:00</published><updated>2022-04-04T18:00:00-05:00</updated><id>https://zonca.dev/2022/04/zarr-jetstream2</id><content type="html" xml:base="https://zonca.dev/2022/04/zarr-jetstream2.html">&lt;h2 id=&quot;zarr&quot;&gt;Zarr&lt;/h2&gt;

&lt;p&gt;Zarr is a file format designed for cloud computing, see &lt;a href=&quot;http://zarr.readthedocs.io&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Zarr is also supported by &lt;a href=&quot;http://dask.pydata.org&quot;&gt;dask&lt;/a&gt;, the parallel computing framework for Python,
and the Dask team implemented storage backends for &lt;a href=&quot;https://github.com/dask/gcsfs&quot;&gt;Google Cloud Storage&lt;/a&gt; and
&lt;a href=&quot;https://github.com/dask/s3fs&quot;&gt;Amazon S3&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;use-openstack-swift-on-jetstream-for-object-storage&quot;&gt;Use OpenStack swift on Jetstream for object storage&lt;/h2&gt;

&lt;p&gt;Jetstream 2, like Jetstream 1, offers access to object storage via OpenStack Swift.
This is a separate service from the Jetstream Virtual Machines, so you do not need to spin
any Virtual Machine dedicated to storing the data but just use the object storage already
provided by Jetstream. When you ask for an allocation, you can ask for volume storage and object store storage.&lt;/p&gt;

&lt;h2 id=&quot;read-zarr-files-from-object-store&quot;&gt;Read Zarr files from object store&lt;/h2&gt;

&lt;p&gt;If somebody else has already made available some files on object store and set their visibility
to “public”, anybody can read them.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;https://gist.github.com/4172aab52ef0cc12623364765e0030f5&quot;&gt;example Notebook to read Zarr files&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OpenStack Swift already provides an endpoint which has an interface compatible with Amazon S3, therefore
we can directly use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S3FileSystem&lt;/code&gt; provided by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s3fs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we can build a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S3Map&lt;/code&gt; object which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zarr&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask.array&lt;/code&gt; can access.&lt;/p&gt;

&lt;p&gt;In this example I am using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;distributed&lt;/code&gt; scheduler on a single node, you can scale up your computation
having workers distributed on multiple nodes, just make sure that all the workers have access to the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zarr&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s3fs&lt;/code&gt; packages.&lt;/p&gt;

&lt;h2 id=&quot;write-zarr-files-or-read-private-files&quot;&gt;Write Zarr files or read private files&lt;/h2&gt;

&lt;p&gt;In this case we need authentication.&lt;/p&gt;

&lt;p&gt;First you need to ask to the XSEDE helpdesk API access to Jetstream, this also gives access
to the Horizon interface, which has many advanced features that are not available in Atmosphere.&lt;/p&gt;

&lt;h3 id=&quot;create-a-bucket&quot;&gt;Create a bucket&lt;/h3&gt;

&lt;p&gt;Object store systems are organized on buckets, which are like root folders of our filesystem.
From the Horizon interface, we can choose Object Store -&amp;gt; Containers (quite confusing way of referring to buckets in OpenStack).
Here we can check content of existing buckets or create a new one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make sure you create the bucket on the right project&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;get-credentials&quot;&gt;Get credentials&lt;/h3&gt;

&lt;p&gt;Once you have Jetstream 2 application credentials on your system,
you can first test you can check the content of the bucket we created above:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openstack object list my_bucket
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now create ec2 credentials with:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openstack ec2 credentials create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is going to display AWS access key and AWS secret, we can save credentials in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.aws/credentials&lt;/code&gt;
in the machine we want then use to write to object store.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[default]
region=RegionOne
aws_access_key_id=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
aws_secret_access_key=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;test-access&quot;&gt;Test access&lt;/h3&gt;

&lt;p&gt;We can check if we can successfully login using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s3fs&lt;/code&gt;, notice we &lt;strong&gt;do not use&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;anon=True&lt;/code&gt; as
we did before:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import s3fs
fs = s3fs.S3FileSystem(client_kwargs=dict(endpoint_url=&quot;https://js2.jetstream-cloud.org:8001/&quot;))
fs.ls(&quot;my_bucket&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;generate-a-file-and-write-it-to-object-store&quot;&gt;Generate a file and write it to object store&lt;/h3&gt;

&lt;p&gt;See a &lt;a href=&quot;https://gist.github.com/33b51f74d9252cc3e5d18d290393c33c&quot;&gt;Notebook example of creating a random array in dask and saving it in Zarr format to Object Store&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="jupyter" /><category term="jetstream2" /><category term="zarr" /><summary type="html">Zarr</summary></entry><entry><title type="html">Deploy Dask Gateway with JupyterHub on Kubernetes</title><link href="https://zonca.dev/2022/04/dask-gateway-jupyterhub.html" rel="alternate" type="text/html" title="Deploy Dask Gateway with JupyterHub on Kubernetes" /><published>2022-04-04T00:00:00-05:00</published><updated>2022-04-04T00:00:00-05:00</updated><id>https://zonca.dev/2022/04/dask-gateway-jupyterhub</id><content type="html" xml:base="https://zonca.dev/2022/04/dask-gateway-jupyterhub.html">&lt;p&gt;In this tutorial we will install &lt;a href=&quot;https://gateway.dask.org/index.html&quot;&gt;Dask Gateway&lt;/a&gt; on Kubernetes and configure JupyterHub so
Jupyter Notebook users can launch private Dask cluster and connect to them.&lt;/p&gt;

&lt;p&gt;I assume to start from a Kubernetes cluster already running and
JupyterHub deployed on top of it via Helm. And SSL encryption also activated (it isn’t probably necessary, but I haven’t tested that).
I tested on Jetstream 2, but the recipe should be agnostic of that.&lt;/p&gt;

&lt;h2 id=&quot;preparation&quot;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;Clone on the machine you use to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;helm&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; the repository
with the configuration files and scripts:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then you need to setup one API token, create it with:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl rand -hex 32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then paste it both in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask_gateway/config_jupyterhub.yaml&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask_gateway/config_dask-gateway.yaml&lt;/code&gt;,
look for the string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TOKEN&lt;/code&gt; and replace it.&lt;/p&gt;

&lt;h2 id=&quot;launch-dask-gateway&quot;&gt;Launch dask gateway&lt;/h2&gt;

&lt;p&gt;The Dask Gateway helm recipe hasn’t been released since November 2021, and version 0.9.0, the last release, doesn’t support Kubernetes 1.22.&lt;/p&gt;

&lt;p&gt;Therefore we need to install a development version of the Helm recipe.&lt;/p&gt;

&lt;p&gt;in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask_gateway&lt;/code&gt; folder, checkout the Dask Gateway repository:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/dask/dask-gateway
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You could try using the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; or the same commit I used:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout 76f43c09db267e20f1bfce501e98a51a7621e694
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;run:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bash install_dask-gateway.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You might want to check &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config_dask-gateway.yaml&lt;/code&gt; for extra configuration options, but for initial setup and testing it shouldn’t be necessary.&lt;/p&gt;

&lt;p&gt;After this you should see the 3 dask gateway pods running, e.g.:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl -n jhub get pods
NAME                                       READY   STATUS    RESTARTS   AGE
api-dask-gateway-64bf5db96c-4xfd6          1/1     Running   2          23m
controller-dask-gateway-7674bd545d-cwfnx   1/1     Running   0          23m
traefik-dask-gateway-5bbd68c5fd-5drm8      1/1     Running   0          23m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;modify-the-jupyterhub-configuration&quot;&gt;Modify the JupyterHub configuration&lt;/h2&gt;

&lt;p&gt;Only 2 options need to be changed in JupyterHub:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We need to run a image which has the same version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask-gateway&lt;/code&gt; we installed on Kubernetes (currently &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.9.0&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;We need to proxy &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask-gateway&lt;/code&gt; through JupyterHub so the users can access the Dask dashboard&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are using my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install_jhub.sh&lt;/code&gt; script to deploy JupyterHub,
you can modify it and add another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;values&lt;/code&gt; option at the end, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--values dask_gateway/config_jupyterhub.yaml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can modify the image you are using for Jupyterhub in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask_gateway/config_jupyterhub.yaml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To assure that there are not compatibility issues, the “Client” (JupyterHub session), the dask gateway server, the scheduler and the workers should all have the same version of Python and the same version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;distributed&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask_gateway&lt;/code&gt;. If this is not possible, you can test different combinations and they might work. The Pangeo notebook image I am using has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask&lt;/code&gt; version too new compared to Dask Gateway 0.9.0, so I downgrade it directly in the example Notebook.&lt;/p&gt;

&lt;p&gt;Then redeploy JupyterHub:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash install_jhub.sh &amp;amp;&amp;amp; cd dask_gateway &amp;amp;&amp;amp; bash install_dask-gateway.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check that the service is working correctly,
if open a browser tab and access &lt;a href=&quot;https://js-XXX-YYY.jetstream-cloud.org/services/dask-gateway/api/health&quot;&gt;https://js-XXX-YYY.jetstream-cloud.org/services/dask-gateway/api/health&lt;/a&gt;, you should see:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{&quot;status&quot;: &quot;pass&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If this is not working, you can open login to JupyterHub, get a terminal and first check if the service is working:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;  curl http://traefik-dask-gateway/services/dask-gateway/api/health
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Should give:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{&quot;status&quot;: &quot;pass&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-a-dask-cluster&quot;&gt;Create a dask cluster&lt;/h2&gt;

&lt;p&gt;You can now login to JupyterHub and check you can connect properly to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask-gateway&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dask_gateway&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gateway&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gateway&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://traefik-dask-gateway/services/dask-gateway/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;public_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://js-XXX-YYY.jetstream-cloud.org/services/dask-gateway/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jupyterhub&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_clusters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then create a cluster and use it:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;cluster&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_cluster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Client is a standard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;distributed&lt;/code&gt; client and all subsequent calls to dask will go
through the cluster.&lt;/p&gt;

&lt;p&gt;Printing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cluster&lt;/code&gt; object gives the link to the Dask dashboard.&lt;/p&gt;

&lt;p&gt;For a full example and screenshots of the widgets and of the dashboard see:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/zonca/355a7ec6b5bd3f84b1413a8c29fbc877&quot;&gt;https://gist.github.com/zonca/355a7ec6b5bd3f84b1413a8c29fbc877&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Click on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Raw&lt;/code&gt; button to download notebook and upload it to your session).&lt;/p&gt;</content><author><name></name></author><category term="kubernetes" /><category term="openstack" /><category term="jetstream2" /><category term="jupyterhub" /><category term="dask" /><summary type="html">In this tutorial we will install Dask Gateway on Kubernetes and configure JupyterHub so Jupyter Notebook users can launch private Dask cluster and connect to them.</summary></entry><entry><title type="html">Deploy JupyterHub on Jetstream 2 on top of Kubernetes</title><link href="https://zonca.dev/2022/03/jetstream2-jupyterhub.html" rel="alternate" type="text/html" title="Deploy JupyterHub on Jetstream 2 on top of Kubernetes" /><published>2022-03-31T00:00:00-05:00</published><updated>2022-03-31T00:00:00-05:00</updated><id>https://zonca.dev/2022/03/jetstream2-jupyterhub</id><content type="html" xml:base="https://zonca.dev/2022/03/jetstream2-jupyterhub.html">&lt;p&gt;This tutorial is a followup to: &lt;a href=&quot;&quot;&gt;Deploy Kubernetes on Jetstream 2 with Kubespray 2.18.0&lt;/a&gt;, so I’ll assume Kubernetes is already deployed with a default storageclass.&lt;/p&gt;

&lt;h2 id=&quot;clone-the-configuration-files-repository&quot;&gt;Clone the configuration files repository&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the main repository which contains configuration files for all the tutorials I write,
I usually always work with this folder as the root folder.&lt;/p&gt;

&lt;h2 id=&quot;install-jupyterhub&quot;&gt;Install Jupyterhub&lt;/h2&gt;

&lt;p&gt;Inside the repository root, first run&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash create_secrets.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to create the secret strings needed by JupyterHub then edit its output
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secrets.yaml&lt;/code&gt; to make sure it is consistent, edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hosts&lt;/code&gt; lines if needed. For example, at the moment Jetstream 2 doesn’t yet provide DNS entries like Jetstream 1 did (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js-XXX-YYY.jetstream-cloud.org&lt;/code&gt;, they are working on it, I’ll update the tutorial when it comes available), so you will need to create a A record that points to the IP of the master node. Most universities offer this service.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash configure_helm_jupyterhub.sh
kubectl create namespace jhub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The newest Kubespray version doesn’t install the CSI driver on the master node, so we cannot run the Hub pod on the master node, I have therefore removed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nodeSelector&lt;/code&gt; and tolerances I had on the configuration for Jetstream 1.&lt;/p&gt;

&lt;p&gt;In any case, the Kubernetes ingress automatically handles network routing.&lt;/p&gt;

&lt;p&gt;Finally run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;helm&lt;/code&gt; to install JupyterHub:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash install_jhub.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is installing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zero-to-jupyterhub&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.2.0&lt;/code&gt;, you can check &lt;a href=&quot;https://github.com/jupyterhub/zero-to-jupyterhub-k8s/releases&quot;&gt;on the zero-to-jupyterhub release page&lt;/a&gt; if a newer version is available, generally transitioning to new releases is painless, they document any breaking changes very well.&lt;/p&gt;

&lt;p&gt;Check pods running with:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl get pods -n jhub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proxy&lt;/code&gt; is running, even if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hub&lt;/code&gt; is still in preparation, you can check
in browser, you should get “Service Unavailable” which is a good sign that
the proxy is working.&lt;/p&gt;

&lt;p&gt;You can finally connect with your browser to the domain you have configured and
check if the Hub is working fine, after that, the pods running using:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl get pods -n jhub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;shoud be:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NAME                              READY   STATUS    RESTARTS   AGE
continuous-image-puller-xlkf6     1/1     Running   0          18m
hub-554bf64f9b-kc2h9              1/1     Running   0          2m26s
jupyter-zonca                     1/1     Running   0          12s
proxy-567d5d9f8d-jr4k9            1/1     Running   0          18m
user-scheduler-79c85f98dd-jpl9l   1/1     Running   0          18m
user-scheduler-79c85f98dd-sg78t   1/1     Running   0          18m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;customize-jupyterhub&quot;&gt;Customize JupyterHub&lt;/h2&gt;

&lt;p&gt;After JupyterHub is deployed and integrated with Cinder for persistent volumes,
for any other customizations, first authentication, you are in good hands as the
&lt;a href=&quot;https://zero-to-jupyterhub.readthedocs.io/en/stable/extending-jupyterhub.html&quot;&gt;Zero-to-Jupyterhub documentation&lt;/a&gt; is great.&lt;/p&gt;

&lt;h2 id=&quot;setup-https-with-letsencrypt&quot;&gt;Setup HTTPS with letsencrypt&lt;/h2&gt;

&lt;p&gt;Kubespray has the option of deploying also &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cert-manager&lt;/code&gt;, but I had trouble deploying an issuer,
it was easier to just deploy it afterwards following &lt;a href=&quot;https://zonca.dev/2020/03/setup-https-kubernetes-letsencrypt.html&quot;&gt;my previous tutorial&lt;/a&gt;, recently updated.&lt;/p&gt;

&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;/h2&gt;

&lt;p&gt;Feedback on this is very welcome, please open an issue on the &lt;a href=&quot;https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream&quot;&gt;Github repository&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="kubernetes" /><category term="jupyterhub" /><category term="jetstream2" /><summary type="html">This tutorial is a followup to: Deploy Kubernetes on Jetstream 2 with Kubespray 2.18.0, so I’ll assume Kubernetes is already deployed with a default storageclass.</summary></entry><entry><title type="html">Deploy Kubernetes on Jetstream 2 with Kubespray 2.18.0</title><link href="https://zonca.dev/2022/03/kubernetes-jetstream2-kubespray.html" rel="alternate" type="text/html" title="Deploy Kubernetes on Jetstream 2 with Kubespray 2.18.0" /><published>2022-03-30T00:00:00-05:00</published><updated>2022-03-30T00:00:00-05:00</updated><id>https://zonca.dev/2022/03/kubernetes-jetstream2-kubespray</id><content type="html" xml:base="https://zonca.dev/2022/03/kubernetes-jetstream2-kubespray.html">&lt;p&gt;This is the first tutorial targeted at Jetstream 2.
The system is in early access and will be soon made available, see &lt;a href=&quot;https://jetstream-cloud.org/&quot;&gt;https://jetstream-cloud.org/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My latest tutorial on Jetstream 1 executed Kubespray 2.15.0, here we are also switching to Kubespray 2.18.0, which installs Kubernetes v1.22.5, released in December 2021.&lt;/p&gt;

&lt;p&gt;For an overview of my work on deploying Kubernetes and JupyterHub on Jetstream, see &lt;a href=&quot;https://zonca.dev/2020/09/gateways-2020-paper.html&quot;&gt;my Gateways 2020 paper&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;create-jetstream-virtual-machines-with-terraform&quot;&gt;Create Jetstream Virtual machines with Terraform&lt;/h2&gt;

&lt;p&gt;Terraform allows to execute recipes that describe a set of OpenStack resources and their relationship. In the context of this tutorial, we do not need to learn much about Terraform, we will configure and execute the recipe provided by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubespray&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;requirements&quot;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;I have been testing with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python-openstackclient&lt;/code&gt; version 5.8.0, but any recent openstack client should work.
install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform&lt;/code&gt; by copying the correct binary to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/local/bin/&lt;/code&gt;, see &lt;a href=&quot;https://www.terraform.io/intro/getting-started/install.html&quot;&gt;https://www.terraform.io/intro/getting-started/install.html&lt;/a&gt;.
The requirement is a terraform version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt; 0.12&lt;/code&gt;, I tested with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.14.4&lt;/code&gt;. Newer versions, for example I tried 1.1.7, &lt;strong&gt;do not work&lt;/strong&gt; with Kubespray.&lt;/p&gt;

&lt;h3 id=&quot;request-api-access&quot;&gt;Request API access&lt;/h3&gt;

&lt;p&gt;The procedure to configure API access has changed since Jetstream, make sure you follow &lt;a href=&quot;https://docs.jetstream-cloud.org/ui/cli/openrc/&quot;&gt;the instructions in the Jetstream 2 documentation to create application credentials&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also make sure you are not hitting any of the &lt;a href=&quot;https://docs.jetstream-cloud.org/ui/cli/troubleshooting/&quot;&gt;issues in the Troubleshooting page&lt;/a&gt;, in particular, it is a good idea to set your password within single quotes to avoid special characters being interpreted by the shell:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export OS_APPLICATION_CREDENTIAL_SECRET='xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Test with:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openstack flavor list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This should return the list of available “sizes” of the Virtual Machines.&lt;/p&gt;

&lt;p&gt;You also need to add to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app*openrc.sh&lt;/code&gt; also this line:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export OS_APPLICATION_CREDENTIAL_NAME=$OS_APPLICATION_CREDENTIAL_ID
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;otherwise Ansible will fail with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;you must either set external_openstack_username or external_openstack_application_credential_name&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;clone-kubespray&quot;&gt;Clone kubespray&lt;/h3&gt;

&lt;p&gt;I needed to make a few modifications to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubespray&lt;/code&gt; to adapt it to Jetstream:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/zonca/jetstream_kubespray
git checkout -b branch_v2.18.0 origin/branch_v2.18.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See an &lt;a href=&quot;https://github.com/zonca/jetstream_kubespray/pull/15&quot;&gt;overview of my changes compared to the standard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubespray&lt;/code&gt; release 2.18.0&lt;/a&gt;,
compared to Jetstream 1, there are no actual changes to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubespray&lt;/code&gt; software itself, it is just a matter of configuring it.
Anyway, it is convenient to just clone the repository.&lt;/p&gt;

&lt;p&gt;Notice also that the most important change compared to Jetstream 1 is that we are using the new External Openstack provider, instead of the internal Openstack provider which is being discontinued. This also pushed me to use the Cinder CSI plugin, which also has a more modern architecture.&lt;/p&gt;

&lt;h3 id=&quot;reserve-a-floating-ip&quot;&gt;Reserve a floating IP&lt;/h3&gt;

&lt;p&gt;We prefer not to have a floating IP handled by Terraform, otherwise it would be released every time we need
to redeploy the cluster, better create it beforehand:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openstack floating ip create public
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will return a public floating IP address, it can also be accessed with:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openstack floating ip list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is useful to save the IP into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app*openrc.sh&lt;/code&gt;, so that every time you load the credentials you also get the address of the master node.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export IP=149.xxx.xxx.xxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;run-terraform&quot;&gt;Run Terraform&lt;/h3&gt;

&lt;p&gt;Inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jetstream_kubespray&lt;/code&gt;, choose a name for the cluster and copy from my template:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export CLUSTER=yourclustername
cp -r inventory/kubejetstream inventory/$CLUSTER
cd inventory/$CLUSTER
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;also &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;export CLUSTER=yourclustername&lt;/code&gt; is useful to add to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app*openrc.sh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Open and modify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cluster.tfvars&lt;/code&gt;, choose your image (by default Ubuntu 20) and number of nodes and the flavor of the nodes, by default they are medium instances (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;4&quot;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Paste the floating ip created previously into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k8s_master_fips&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Initialize Terraform:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash terraform_init.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create the resources:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash terraform_apply.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can SSH into the master node with:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh ubuntu@$IP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Inspect with Openstack the resources created:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openstack server list
openstack network list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can cleanup the virtual machines and all other Openstack resources (all data is lost) with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bash terraform_destroy.sh&lt;/code&gt;. The floating IP won’t be released so we can create a cluster again from scratch with the same IP address.&lt;/p&gt;

&lt;h2 id=&quot;install-and-test-ansible&quot;&gt;Install and test Ansible&lt;/h2&gt;

&lt;p&gt;Change folder back to the root of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jetstream_kubespray&lt;/code&gt; repository,&lt;/p&gt;

&lt;p&gt;First make sure you have a recent version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ansible&lt;/code&gt; installed, you also need additional modules,
so first run:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt; script installs a predefined version of ansible, currently &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.10.15&lt;/code&gt;, so it is useful to create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtualenv&lt;/code&gt; or a conda environment and install packages inside that.&lt;/p&gt;

&lt;p&gt;Then following the &lt;a href=&quot;https://github.com/kubernetes-incubator/kubespray/blob/master/contrib/terraform/openstack/README.md#ansible&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubespray&lt;/code&gt; documentation&lt;/a&gt;, we setup &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-agent&lt;/code&gt; so that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ansible&lt;/code&gt; can SSH from the machine with public IP to the others:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;eval $(ssh-agent -s)
ssh-add ~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Test the connection through ansible:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ansible -i inventory/$CLUSTER/hosts -m ping all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;install-kubernetes-with-kubespray&quot;&gt;Install Kubernetes with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubespray&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inventory/$CLUSTER/group_vars/k8s-cluster/k8s-cluster.yml&lt;/code&gt;, set the public floating IP of the master instance in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;supplementary_addresses_in_ssl_keys&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally run the full playbook, it is going to take a good 10 minutes, go make coffee:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash k8s_install.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the playbook fails with “cannot lock the administrative directory”, it is due to the fact that the Virtual Machine is automatically updating so it has locked the APT directory. Just wait a minute and launch it again. It is always safe to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ansible&lt;/code&gt; multiple times.&lt;/p&gt;

&lt;p&gt;If the playbook gives any error, try to retry the above command, sometimes there are temporary failed tasks, Ansible is designed to be executed multiple times with consistent results.&lt;/p&gt;

&lt;p&gt;You should have now a Kubernetes cluster running, test it:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ssh ubuntu@$IP
$ sudo su
$ kubectl get pods --all-namespaces
NAMESPACE       NAME                                           READY   STATUS    RESTARTS   AGE
ingress-nginx   ingress-nginx-controller-4xd64                 1/1     Running   0          27m
kube-system     coredns-8474476ff8-9gd8w                       1/1     Running   0          27m
kube-system     coredns-8474476ff8-qtshk                       1/1     Running   0          27m
kube-system     csi-cinder-controllerplugin-9fb5946bf-hwfhp    6/6     Running   0          26m
kube-system     csi-cinder-nodeplugin-r69nl                    3/3     Running   0          26m
kube-system     dns-autoscaler-5ffdc7f89d-s4sj4                1/1     Running   0          27m
kube-system     kube-apiserver-kubejs2-k8s-master-1            1/1     Running   1          66m
kube-system     kube-controller-manager-kubejs2-k8s-master-1   1/1     Running   1          66m
kube-system     kube-flannel-2clqv                             1/1     Running   0          29m
kube-system     kube-flannel-2wbtq                             1/1     Running   0          29m
kube-system     kube-proxy-hmz6t                               1/1     Running   0          30m
kube-system     kube-proxy-xkhjx                               1/1     Running   0          30m
kube-system     kube-scheduler-kubejs2-k8s-master-1            1/1     Running   1          66m
kube-system     nginx-proxy-kubejs2-k8s-node-1                 1/1     Running   0          64m
kube-system     nodelocaldns-jwxg8                             1/1     Running   0          27m
kube-system     nodelocaldns-z4sjl                             1/1     Running   0          27m
kube-system     openstack-cloud-controller-manager-6q28z       1/1     Running   0          29m
kube-system     snapshot-controller-786647474f-7x8zx           1/1     Running   0          25m

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Compare that you have all those services running also in your cluster.
We have also configured NGINX to proxy any service that we will later deploy on Kubernetes,
test it with:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ wget localhost
--2022-03-31 06:51:20--  http://localhost/
Resolving localhost (localhost)... 127.0.0.1
Connecting to localhost (localhost)|127.0.0.1|:80... connected.
HTTP request sent, awaiting response... 404 Not Found
2022-03-31 06:51:20 ERROR 404: Not Found.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Error 404 is a good sign, the service is up and serving requests, currently there is nothing to deliver.
If any of the tests hangs or cannot connect, there is probably a networking issue.&lt;/p&gt;

&lt;h2 id=&quot;set-the-default-storage-class&quot;&gt;Set the default storage class&lt;/h2&gt;

&lt;p&gt;Kubespray sets up the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cinder-csi&lt;/code&gt; storage class, but it is not set as default, we can fix it with:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl patch storageclass cinder-csi -p '{&quot;metadata&quot;: {&quot;annotations&quot;:{&quot;storageclass.kubernetes.io/is-default-class&quot;:&quot;true&quot;}}}'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;so that we don’t need to explicitely configure it in the applications we deploy.&lt;/p&gt;

&lt;h2 id=&quot;optional-setup-kubectl-locally&quot;&gt;(Optional) Setup kubectl locally&lt;/h2&gt;

&lt;p&gt;Install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; locally, I am currently using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.20&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We also set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeconfig_localhost: true&lt;/code&gt;, which copies the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; configuration  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin.conf&lt;/code&gt; to:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;inventory/$CLUSTER/artifacts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I have a script to  replace the IP with the floating IP of the master node, for this script to work make sure you have exported the variable IP:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash k8s_configure_kubectl_locally.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally edit again the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app*openrc.sh&lt;/code&gt; and add:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export KUBECONFIG=$(pwd -P)/&quot;jetstream_kubespray/inventory/$CLUSTER/artifacts/admin.conf&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;optional-setup-helm-locally&quot;&gt;(Optional) Setup helm locally&lt;/h2&gt;

&lt;p&gt;Install helm 3 from &lt;a href=&quot;https://github.com/helm/helm/releases&quot;&gt;the release page on Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I tested with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3.8.1&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;install-jupyterhub&quot;&gt;Install Jupyterhub&lt;/h2&gt;

&lt;p&gt;Follow up in the next tutorial: &lt;a href=&quot;&quot;&gt;Install JupyterHub on Jetstream 2 on top of Kubernetes&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="kubernetes" /><category term="kubespray" /><category term="jetstream2" /><summary type="html">This is the first tutorial targeted at Jetstream 2. The system is in early access and will be soon made available, see https://jetstream-cloud.org/.</summary></entry><entry><title type="html">Workflow for Jupyter Notebooks under version control</title><link href="https://zonca.dev/2022/03/jupyter-notebooks-version-control.html" rel="alternate" type="text/html" title="Workflow for Jupyter Notebooks under version control" /><published>2022-03-22T00:00:00-05:00</published><updated>2022-03-22T00:00:00-05:00</updated><id>https://zonca.dev/2022/03/jupyter-notebooks-version-control</id><content type="html" xml:base="https://zonca.dev/2022/03/jupyter-notebooks-version-control.html">&lt;p&gt;I’ll present here my strategy for keeping Jupyter Notebooks under version control.&lt;/p&gt;

&lt;p&gt;TLDR:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nbstripout&lt;/code&gt; to only commit input cells&lt;/li&gt;
  &lt;li&gt;Snapshot executed Notebooks to a Gist with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh gist create&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Save link to Gist in commit message and in Notebook cell&lt;/li&gt;
  &lt;li&gt;see below for script to automate&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Github handles ipynb pretty well, so I prefer not to use &lt;a href=&quot;https://github.com/mwouts/jupytext&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jupytext&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I want small repositories, so only commit the input cells&lt;/li&gt;
  &lt;li&gt;I want to save the executed notebooks, not in the repo, but where I can easily reference them if needed&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;workflow&quot;&gt;Workflow&lt;/h2&gt;

&lt;h3 id=&quot;notebooks-and-git&quot;&gt;Notebooks and git&lt;/h3&gt;

&lt;p&gt;I work on Notebooks as I work with normal Python files, so I always run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;black&lt;/code&gt; on them to fix formatting, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add -p&lt;/code&gt; to add snippet by snippet. I don’t mind the little extra escaping the Notebook introduces.&lt;/p&gt;

&lt;p&gt;I have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nbstripout&lt;/code&gt; filters activated (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nbstripout --install&lt;/code&gt;) so that even if the notebook is partially executed, when I run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add -p&lt;/code&gt; I only get the patches on the input cells.&lt;/p&gt;

&lt;p&gt;Moreover, I configure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nbstripout&lt;/code&gt; &lt;a href=&quot;https://github.com/kynan/nbstripout#stripping-metadata&quot;&gt;to remove metadata&lt;/a&gt; like the kernelspec or the Python version, which doesn’t do by default&lt;/p&gt;

&lt;h3 id=&quot;snapshot-executed-notebooks&quot;&gt;Snapshot executed Notebooks&lt;/h3&gt;

&lt;p&gt;The Jupyter Notebook inside the repository has only the inputs, but I would like to save executed Notebooks for tracking purposes without increasing the size of the repository.&lt;/p&gt;

&lt;p&gt;First I do a clean execution of the Notebook (with Restart &amp;amp; Run All), then I save the changes to the input cells to the repository. I don’t need to clear the outputs from the Notebook, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nbstripout&lt;/code&gt; does it on th e fly before submitting changes to git.&lt;/p&gt;

&lt;p&gt;Then I post the executed Notebook with all outputs to a Gist from the command line with the Github CLI:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gh gist create my_notebook.ipynb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Optionally with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--public&lt;/code&gt; to make it show on my Gist profile.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh&lt;/code&gt; tool returns the link to the Gist, that I can add to the commit message or post in a Pull Request or an Issue.&lt;/p&gt;

&lt;h3 id=&quot;add-executed-notebooks-to-the-documentation&quot;&gt;Add executed Notebooks to the documentation&lt;/h3&gt;

&lt;p&gt;Once I have the final version of a Notebook, I often use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nbsphinx&lt;/code&gt; to add it to the documentation.&lt;/p&gt;

&lt;p&gt;So I disable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nbstripout&lt;/code&gt; with:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nbstripout --uninstall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then I add just the last executed state of the Notebook to the repository, so that Sphinx/Readthedocs can compile it into the documentation, including all plots.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://pysm3.readthedocs.io/en/latest/preprocess-templates/gnilc_dust_logpoltens_templates.html&quot;&gt;an example of a Notebook compiled into HTML by Sphinx&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;automation-script&quot;&gt;Automation script&lt;/h2&gt;

&lt;p&gt;I have created a bash script that automates the process:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;call with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;snapshot_nb your_notebook.ipynb&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;creates a Gist with the Notebook&lt;/li&gt;
  &lt;li&gt;amends the last commit to add a link to it&lt;/li&gt;
  &lt;li&gt;it also creates a new Markdown cell with the tag &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;snapshotlog&lt;/code&gt; and the title “Execution log” and appends a link to the gist with date and time of execution (Thanks &lt;a href=&quot;https://twitter.com/cosmic_mar&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@cosmic_mar&lt;/code&gt;&lt;/a&gt; for the suggestion), see &lt;a href=&quot;https://gist.github.com/zonca/0fd8770877a1c90c5a7f22d4a391471d&quot;&gt;how the Execution log looks like&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;it actually works with any text file, even multiple files, so it could be used for log outputs for example&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://gist.github.com/2f2eba4f0288ca4079f7f83efa6b9048&quot;&gt;https://gist.github.com/2f2eba4f0288ca4079f7f83efa6b9048&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Install it by symlinking the 2 scripts to an executable folder, for example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/bin&lt;/code&gt;, also useful if you fork my Gist.&lt;/p&gt;

&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;/h2&gt;

&lt;p&gt;See &lt;a href=&quot;https://twitter.com/andreazonca/status/1506458567456411649&quot;&gt;this thread on Twitter&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="jupyter-notebook" /><category term="git" /><summary type="html">I’ll present here my strategy for keeping Jupyter Notebooks under version control.</summary></entry><entry><title type="html">Deploy Dask Gateway with JupyterHub on Kubernetes</title><link href="https://zonca.dev/2022/01/dask-gateway-jupyterhub.html" rel="alternate" type="text/html" title="Deploy Dask Gateway with JupyterHub on Kubernetes" /><published>2022-01-27T00:00:00-06:00</published><updated>2022-01-27T00:00:00-06:00</updated><id>https://zonca.dev/2022/01/dask-gateway-jupyterhub</id><content type="html" xml:base="https://zonca.dev/2022/01/dask-gateway-jupyterhub.html">&lt;p&gt;&lt;strong&gt;Tutorial OBSOLETE&lt;/strong&gt; Please check &lt;a href=&quot;&quot;&gt;the updated version of this tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This tutorial follows the work by the Pangeo collaboration,
the main difference is that I prefer to keep JupyterHub and the Dask infrastructure
in 2 separate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Helm&lt;/code&gt; recipes.&lt;/p&gt;

&lt;p&gt;I assume to start from a Kubernetes cluster already running and
JupyterHub deployed on top of it via Helm. And SSL encryption also activated (it isn’t probably necessary, but I haven’t tested that).
I tested on Jetstream, but this is agnostic of that.&lt;/p&gt;

&lt;h2 id=&quot;preparation&quot;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;Clone on the machine you use to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;helm&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; the repository
with the configuration files and scripts:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then you need to setup one API token, create it with:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl rand -hex 32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then paste it both in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask_gateway/config_jupyterhub.yaml&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask_gateway/config_dask-gateway.yaml&lt;/code&gt;,
look for the string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TOKEN&lt;/code&gt; and replace it.&lt;/p&gt;

&lt;h2 id=&quot;launch-dask-gateway&quot;&gt;Launch dask gateway&lt;/h2&gt;

&lt;p&gt;See the &lt;a href=&quot;https://gateway.dask.org/install-kube.html&quot;&gt;dask gateway documentation&lt;/a&gt; for reference:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ helm repo add daskgateway https://dask.org/dask-gateway-helm-repo/
$ helm repo update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;enter the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask_gateway&lt;/code&gt; folder and run:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bash install_dask-gateway.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You might want to check &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config_dask-gateway.yaml&lt;/code&gt; for extra configuration options, but for initial setup and testing it shouldn’t be necessary.&lt;/p&gt;

&lt;p&gt;After this you should see the 3 dask gateway pods running, e.g.:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl -n jhub get pods
NAME                                       READY   STATUS    RESTARTS   AGE
api-dask-gateway-64bf5db96c-4xfd6          1/1     Running   2          23m
controller-dask-gateway-7674bd545d-cwfnx   1/1     Running   0          23m
traefik-dask-gateway-5bbd68c5fd-5drm8      1/1     Running   0          23m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;modify-the-jupyterhub-configuration&quot;&gt;Modify the JupyterHub configuration&lt;/h2&gt;

&lt;p&gt;Only 2 options need to be changed in JupyterHub:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We need to run a image which has the same version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask-gateway&lt;/code&gt; we installed on Kubernetes (currently &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.9.0&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;We need to proxy &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask-gateway&lt;/code&gt; through JupyterHub so the users can access the Dask dashboard&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are using my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install_jhub.sh&lt;/code&gt; script to deploy JupyterHub,
you can modify it and add another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;values&lt;/code&gt; option at the end, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--values dask_gateway/config_jupyterhub.yaml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can modify the image you are using for Jupyterhub in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask_gateway/config_jupyterhub.yaml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To assure that there are not compatibility issues, the “Client” (JupyterHub session), the dask gateway server, the scheduler and the workers should all have the same version of Python and the same version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;distributed&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask_gateway&lt;/code&gt;. If this is not possible, you can test different combinations and they might work. The Pangeo notebook image I am using has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask&lt;/code&gt; version too new compared to Dask Gateway 0.9.0, so I downgrade it directly in the example Notebook.&lt;/p&gt;

&lt;p&gt;Then redeploy JupyterHub:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash install_jhub.sh &amp;amp;&amp;amp; cd dask_gateway &amp;amp;&amp;amp; bash install_dask-gateway.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check that the service is working correctly,
if open a browser tab and access &lt;a href=&quot;https://js-XXX-YYY.jetstream-cloud.org/services/dask-gateway/api/health&quot;&gt;https://js-XXX-YYY.jetstream-cloud.org/services/dask-gateway/api/health&lt;/a&gt;, you should see:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{&quot;status&quot;: &quot;pass&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If this is not working, you can open login to JupyterHub, get a terminal and first check if the service is working:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;  curl http://traefik-dask-gateway/services/dask-gateway/api/health
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Should give:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{&quot;status&quot;: &quot;pass&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-a-dask-cluster&quot;&gt;Create a dask cluster&lt;/h2&gt;

&lt;p&gt;You can now login to JupyterHub and check you can connect properly to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask-gateway&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dask_gateway&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gateway&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gateway&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://traefik-dask-gateway/services/dask-gateway/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;public_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://js-XXX-YYY.jetstream-cloud.org/services/dask-gateway/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jupyterhub&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_clusters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then create a cluster and use it:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;cluster&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_cluster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Client is a standard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;distributed&lt;/code&gt; client and all subsequent calls to dask will go
through the cluster.&lt;/p&gt;

&lt;p&gt;Printing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cluster&lt;/code&gt; object gives the link to the Dask dashboard.&lt;/p&gt;

&lt;p&gt;For a full example and screenshots of the widgets and of the dashboard see:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/zonca/355a7ec6b5bd3f84b1413a8c29fbc877&quot;&gt;https://gist.github.com/zonca/355a7ec6b5bd3f84b1413a8c29fbc877&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Click on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Raw&lt;/code&gt; button to download notebook and upload it to your session).&lt;/p&gt;</content><author><name></name></author><category term="kubernetes" /><category term="openstack" /><category term="jetstream" /><category term="jupyterhub" /><category term="dask" /><summary type="html">Tutorial OBSOLETE Please check the updated version of this tutorial.</summary></entry><entry><title type="html">Make for repeated commands</title><link href="https://zonca.dev/2022/01/make.html" rel="alternate" type="text/html" title="Make for repeated commands" /><published>2022-01-07T00:00:00-06:00</published><updated>2022-01-07T00:00:00-06:00</updated><id>https://zonca.dev/2022/01/make</id><content type="html" xml:base="https://zonca.dev/2022/01/make.html">&lt;p&gt;I often find myself repeat the same commands in a project,
for example in Openstack/Kubernetes, but also when I need to interface with Docker (build/push image).&lt;/p&gt;

&lt;p&gt;Instead of relying on bash history or writing a few bash scripts, it is just easier
to write a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Makefile&lt;/code&gt;, even if you do not use the Make dependencies and you just use
it as a collection of useful commands.&lt;/p&gt;

&lt;p&gt;Here is a template to start from, which supports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make list&lt;/code&gt; to show available targets
and shows how to pass arguments to a command:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/zonca/fd1980c1aeac394bfc854fce24b9b0df&quot;&gt;https://gist.github.com/zonca/fd1980c1aeac394bfc854fce24b9b0df&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="make" /><summary type="html">I often find myself repeat the same commands in a project, for example in Openstack/Kubernetes, but also when I need to interface with Docker (build/push image).</summary></entry><entry><title type="html">Fund healpy via Github Sponsors</title><link href="https://zonca.dev/2021/11/fund-healpy.html" rel="alternate" type="text/html" title="Fund healpy via Github Sponsors" /><published>2021-11-08T00:00:00-06:00</published><updated>2021-11-08T00:00:00-06:00</updated><id>https://zonca.dev/2021/11/fund-healpy</id><content type="html" xml:base="https://zonca.dev/2021/11/fund-healpy.html">&lt;p&gt;&lt;a href=&quot;https://github.com/sponsors/zonca&quot;&gt;&lt;strong&gt;Github Sponsor page&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;healpy&lt;/code&gt; is low-level necessary tooling for working with cosmology data&lt;/li&gt;
  &lt;li&gt;There is never funding for maintaining &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;healpy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Consider using grants to fund &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;healpy&lt;/code&gt; through &lt;a href=&quot;https://github.com/sponsors/zonca?frequency=recurring&amp;amp;sponsor=zonca&quot;&gt;Github Sponsors&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This will fund extra working hours for Andrea Zonca to work on the project&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;preamble&quot;&gt;Preamble&lt;/h2&gt;

&lt;p&gt;In ~2007 I was a Graduate Student at the Italian Istitute of Astrophysics, I was using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numpy&lt;/code&gt;, just created a couple of years prior.
I remember that Travis Oliphant, the developer of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numpy&lt;/code&gt;, was asking for a contribution to get a PDF version of the manual. I realized I could have helped development of this key Python package and I was able to purchase it on our funding for the &lt;a href=&quot;https://www.esa.int/Science_Exploration/Space_Science/Planck&quot;&gt;Planck mission&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;current-status-of-healpy&quot;&gt;Current status of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;healpy&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;I have been the lead maintainer of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;healpy&lt;/code&gt; since 2010, when I was working as a Postdoc at University of California Santa Barbara.
The package is now close to a large re-factoring. Martin Reinecke, the developer of HEALPix C++, released a Python package, &lt;a href=&quot;https://pypi.org/project/ducc0/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ducc0&lt;/code&gt;&lt;/a&gt;, which includes all the low-level functionality needed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;healpy&lt;/code&gt;.
The plan is to create a major rewrite of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;healpy&lt;/code&gt;, changing the interface, and provide a higher level interface to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ducc0&lt;/code&gt; as a pure Python package which has all the features of the current &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;healpy&lt;/code&gt; versions, i.e. file I/O, plotting, interface to spherical harmonics transforms.&lt;/p&gt;

&lt;h2 id=&quot;funding-for-healpy&quot;&gt;Funding for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;healpy&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;There have never been funding specifically focused on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;healpy&lt;/code&gt;, I have generally took time out of my working week to maintain the package, instead of working on the project I was funded for.
This is getting more and more complicated as I advance my career and get more responsibilities.&lt;/p&gt;

&lt;p&gt;We recently applied for a NASA grant that would fund &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;healpy&lt;/code&gt; work at 20% Full Time Equivalent for 3 years, it got “very good” reviews, but was not funded.&lt;/p&gt;

&lt;h2 id=&quot;using-github-sponsors&quot;&gt;Using Github Sponsors&lt;/h2&gt;

&lt;p&gt;So my idea for long-term sustainability of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;healpy&lt;/code&gt; is to ask projects using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;healpy&lt;/code&gt; on a daily basis to support the maintenance of the package on their grants.
After all, back in the day, everybody was paying for IDL licenses. Now, if Principal Investigators, possibly prompted by PostDocs/Grad or Undergrad students, could spend a bit of software money from their grants into funding maintenance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;healpy&lt;/code&gt;, we could have a healthier sustainability plan for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;healpy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Github has launched the Github Sponsors program specifically to fund open-source software. People can make a recurring or one-time contribution to a project or to a developer.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sponsors/zonca&quot;&gt;&lt;strong&gt;Github Sponsor page&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-funds-will-be-used&quot;&gt;How funds will be used&lt;/h2&gt;

&lt;p&gt;Funds will cover extra hours on top of my work week that I will dedicate exclusively to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;healpy&lt;/code&gt;, in particular:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fix bugs&lt;/li&gt;
  &lt;li&gt;review Pull Requests with code contributions&lt;/li&gt;
  &lt;li&gt;work on the re-factoring from a HEALPix C++ to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ducc&lt;/code&gt; backend&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zonca.dev/categories/#healpy&quot;&gt;write tutorials on how to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;healpy&lt;/code&gt; for CMB data analysis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/users/597609/andrea-zonca?tab=answers&quot;&gt;answer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;healpy&lt;/code&gt;-related questions on Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;/h2&gt;

&lt;p&gt;If you have any feedback, please &lt;a href=&quot;https://twitter.com/andreazonca&quot;&gt;tweet &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@andreazonca&lt;/code&gt;&lt;/a&gt; or email &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zonca&lt;/code&gt; on the domain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sdsc.edu&lt;/code&gt;.&lt;/p&gt;</content><author><name></name></author><category term="healpy" /><summary type="html">Github Sponsor page</summary></entry><entry><title type="html">Kubernetes certifications CKA and CKAD</title><link href="https://zonca.dev/2021/11/cka-ckad-kubernetes-certification.html" rel="alternate" type="text/html" title="Kubernetes certifications CKA and CKAD" /><published>2021-11-04T00:00:00-05:00</published><updated>2021-11-04T00:00:00-05:00</updated><id>https://zonca.dev/2021/11/cka-ckad-kubernetes-certification</id><content type="html" xml:base="https://zonca.dev/2021/11/cka-ckad-kubernetes-certification.html">&lt;p&gt;I recently pursued 2 Kubernetes certifications by Linux Foundation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Certified Kubernetes Administrator (CKA)&lt;/li&gt;
  &lt;li&gt;Certified Kubernetes Application Developer (CKAD)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have been deploying, managing and using Kubernetes on Jetstream for more than 4 years
(&lt;a href=&quot;https://zonca.dev/2017/12/scalable-jupyterhub-kubernetes-jetstream.html&quot;&gt;my first tutorial back in 2017&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;However I never did any formal training so my knowledge was sparse.
I was extremely useful to follow the 2 classes by Linux Foundation related to the certifications, they gave
me a more systematic view of all parts of Kubernetes.&lt;/p&gt;

&lt;p&gt;I decided to follow both, but there is a lot of overlap, so better choose one of the 2,
if you are more interested in using Kubernetes to deploy applications, do only CKAD and the related class,
if you need to administer Kubernetes deployments, take only CKA.&lt;/p&gt;

&lt;p&gt;The most important part of the training is the “test session” on Killer.sh, this is a simulation of the real
certification exam and gives you a lot of experience in being fast in navigating the docs and using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt;.
The exam itself also teaches a lot, you are logging into Kubernetes clusters, solving issues and performing real-world tasks.&lt;/p&gt;

&lt;p&gt;The certification exam is done via proctoring, but the process is quite painless.
For the exam you really need to be fast and know how to create resources with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl create&lt;/code&gt; instead of writing
YAML every time, go for YAML just for the more complicated resources. I got to the end of both exams with 15 minutes to spare on the total of 2 hours, that I used to debug the questions I couldn’t do in the first pass.&lt;/p&gt;

&lt;h2 id=&quot;suggestions-for-the-tests&quot;&gt;Suggestions for the tests&lt;/h2&gt;

&lt;p&gt;Have bookmarks ready, I found a set on the web and added a few of my own, see &lt;a href=&quot;https://gist.github.com/zonca/b1f7ee0f884cae8011e86a41e6c525d5&quot;&gt;https://gist.github.com/zonca/b1f7ee0f884cae8011e86a41e6c525d5&lt;/a&gt;, you can also copy the links to the YAML files and do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt; from the terminal.&lt;/p&gt;

&lt;h3 id=&quot;bash&quot;&gt;Bash&lt;/h3&gt;

&lt;p&gt;You need to memorize these variables and aliases to type into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export do=&quot;--dry-run=client -o yaml&quot;
export now=&quot;--force --grace-period 0&quot;
alias  kr=&quot;kubectl --replace $now -f&quot;
export VISUAL=vim
export EDITOR=vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The variables about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vim&lt;/code&gt; are needed to have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vim&lt;/code&gt; keybindings in TMUX.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kr&lt;/code&gt; is very useful because you can use it instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k apply -f&lt;/code&gt; and you have it ready if you need to modify the YAML and replace the resource.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$do&lt;/code&gt; is necessary to create the YAML for a resource with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k create&lt;/code&gt; and then go from there.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$now&lt;/code&gt; just to quickly delete resources.&lt;/p&gt;

&lt;h3 id=&quot;vim&quot;&gt;Vim&lt;/h3&gt;

&lt;p&gt;Minimal &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt; for editing YAML files:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set expandtab
set shiftwidth=2
set tabstop=2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;tmux&quot;&gt;TMux&lt;/h3&gt;

&lt;p&gt;You already use TMux, so it is useful to have 2 windows, the first one for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; and the second for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vim&lt;/code&gt;, it is important not to confuse them, you only go configure the environment in the first window, so you can run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; only there.&lt;/p&gt;

&lt;p&gt;In case you use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;screen&lt;/code&gt; mode with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CTRL-A&lt;/code&gt; as I do, no need to memorize the spell, just open &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man tmux&lt;/code&gt;, search for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default prefix&lt;/code&gt; and copy paste into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tmux.conf&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set-option -g prefix C-a
unbind-key C-b
bind-key C-a send-prefix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="kubernetes" /><summary type="html">I recently pursued 2 Kubernetes certifications by Linux Foundation:</summary></entry></feed>