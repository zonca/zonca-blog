<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://zonca.dev/feed.xml" rel="self" type="application/atom+xml" /><link href="https://zonca.dev/" rel="alternate" type="text/html" /><updated>2022-06-06T18:15:41-05:00</updated><id>https://zonca.dev/feed.xml</id><title type="html">Andrea Zonca</title><subtitle>Tutorials and blog posts by Andrea Zonca: Python, Jupyter, Kubernetes</subtitle><entry><title type="html">Deploy MariaDB on Jetstream 2 on top of Kubernetes</title><link href="https://zonca.dev/2022/06/mariadb-jetstream2-kubernetes.html" rel="alternate" type="text/html" title="Deploy MariaDB on Jetstream 2 on top of Kubernetes" /><published>2022-06-06T00:00:00-05:00</published><updated>2022-06-06T00:00:00-05:00</updated><id>https://zonca.dev/2022/06/mariadb-jetstream2-kubernetes</id><content type="html" xml:base="https://zonca.dev/2022/06/mariadb-jetstream2-kubernetes.html">&lt;p&gt;In this tutorial we will install a MariaDB instance backed by a persistent volume
on Jetstream 2.
It will be in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jhub&lt;/code&gt; namespace, so that it can be accessed by the JupyterHub users and from
no other namespace.&lt;/p&gt;

&lt;p&gt;As usual all configuration files and scripts are in my reference repository:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gh repo clone zonca/jupyterhub-deploy-kubernetes-jetstream
cd jupyterhub-deploy-kubernetes-jetstream/mariadb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;install-via-helm&quot;&gt;Install via Helm&lt;/h2&gt;

&lt;p&gt;Bitnami provides a nicely prepackaged MariaDB instance via Helm,
modify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mariadb/values.yaml&lt;/code&gt; file, in particular set all the passwords to randomly generated values.&lt;/p&gt;

&lt;p&gt;I have configured the recipe so that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;database name is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mariadbk8s&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;non root username is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mariadbuser&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Install it with&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash install_mariadb.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;load-data-from-a-sql-dump&quot;&gt;Load data from a SQL dump&lt;/h2&gt;

&lt;p&gt;Once the database is running, follow the printout of the Helm recipe on how to get a temporary pod to connect to the database.&lt;/p&gt;

&lt;p&gt;Once that is running, you will have a terminal running, there you can get your SQL dump for example from gist:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /tmp
curl https://gist.github.com/zonca/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx/raw/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx/dump.sql --output dump.sql -L
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally ingest the data (will need to paste the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; password from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;values.yaml&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql -h mariadb.jhub.svc.cluster.local -uroot -p mariadbk8s &amp;lt; dump.sql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;add-support-in-user-containers&quot;&gt;Add support in user containers&lt;/h2&gt;

&lt;p&gt;Finally you need to make sure that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mariadb-client&lt;/code&gt; package is installed in the Jupyter single user OS, and in the Python environment you will need the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mariadb&lt;/code&gt; package and possibly &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqlalchemy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example Centos 7 needs the MariaDB custom repositories and the packages:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MariaDB-devel MariaDB-connect-engine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The connection string for SQLAlchemy will be:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from urllib.parse import quote_plus as urlquote
pw = urlquote('xxxxxxxxxxxxxxxxxxxx')
engine = sqlalchemy.create_engine(f&quot;mariadb+mariadbconnector://mariadbuser:{pw}@mariadb.jhub.svc.cluster.local:3306/mariadbk8s&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="kubernetes" /><category term="jupyterhub" /><category term="jetstream2" /><summary type="html">In this tutorial we will install a MariaDB instance backed by a persistent volume on Jetstream 2. It will be in the jhub namespace, so that it can be accessed by the JupyterHub users and from no other namespace.</summary></entry><entry><title type="html">Remove unique cell id from Jupyter Notebooks</title><link href="https://zonca.dev/2022/05/remove-cell-id-jupyter-notebook.html" rel="alternate" type="text/html" title="Remove unique cell id from Jupyter Notebooks" /><published>2022-05-17T00:00:00-05:00</published><updated>2022-05-17T00:00:00-05:00</updated><id>https://zonca.dev/2022/05/remove-cell-id-jupyter-notebook</id><content type="html" xml:base="https://zonca.dev/2022/05/remove-cell-id-jupyter-notebook.html">&lt;p&gt;I know! Jupyter is littering your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git diff&lt;/code&gt; with randomly generated cell ids and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nbstripout&lt;/code&gt; doesn’t remove them, (I’m sure they are useful for some reason).&lt;/p&gt;

&lt;p&gt;Open the Notebook with your editor of choice, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vim&lt;/code&gt;, then look for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minor&lt;/code&gt; and set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nbformat_minor&lt;/code&gt; to 4:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;nbformat_minor&quot;: 4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Open and save again from Jupyter, cell ids should be gone for good!&lt;/p&gt;</content><author><name></name></author><category term="git" /><category term="notebook" /><summary type="html">I know! Jupyter is littering your git diff with randomly generated cell ids and nbstripout doesn’t remove them, (I’m sure they are useful for some reason).</summary></entry><entry><title type="html">Access running Github action with SSH</title><link href="https://zonca.dev/2022/05/ssh-github-action.html" rel="alternate" type="text/html" title="Access running Github action with SSH" /><published>2022-05-02T00:00:00-05:00</published><updated>2022-05-02T00:00:00-05:00</updated><id>https://zonca.dev/2022/05/ssh-github-action</id><content type="html" xml:base="https://zonca.dev/2022/05/ssh-github-action.html">&lt;p&gt;Sometimes Github actions are failing and it is difficult to reproduce the error locally,
in particular if you have a different OS.&lt;/p&gt;

&lt;p&gt;Fortunately we can use the &lt;a href=&quot;https://github.com/marketplace/actions/debugging-with-ssh&quot;&gt;Debugging with SSH Github action&lt;/a&gt;,
make a temporary branch, and add this step before the step that produces an error:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  - name: Setup upterm session
    uses: lhotari/action-upterm@v1
    with:
      ## limits ssh access and adds the ssh public key for the user which triggered the workflow
      limit-access-to-actor: false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Anybody can connect to this session, so make sure you don’t have sensitive data&lt;/p&gt;

&lt;p&gt;Create a pull request to trigger execution of the Github action workflow.&lt;/p&gt;

&lt;p&gt;Then check the logs of your Linux and Mac OS builds, you should find a connection string of the form:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh &amp;lt;somestring&amp;gt;:&amp;lt;somestring&amp;gt;=@uptermd.upterm.dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Type it in a terminal to connect to the virtual machine running on Github and debug the issue interactively.&lt;/p&gt;

&lt;p&gt;If you get a “Permission denied (public key)” on Linux, see &lt;a href=&quot;https://github.com/lhotari/action-upterm/issues/9#issuecomment-1060684368&quot;&gt;this workaround&lt;/a&gt;, pasted here for convenience (you don’t need to add this key to your github account):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-keygen -o -a 100 -t ed25519 -f ~/.ssh/id_ed25519 -C &quot;yourusername@company&quot;
ssh -i ~/.ssh/id_ed25519 &amp;lt;somestring&amp;gt;:&amp;lt;somestring&amp;gt;=@uptermd.upterm.dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/zonca/healpy/pull/4&quot;&gt;the pull request I used for testing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once done, take a look at the current running Actions and cancel any leftover runs.&lt;/p&gt;</content><author><name></name></author><category term="github" /><summary type="html">Sometimes Github actions are failing and it is difficult to reproduce the error locally, in particular if you have a different OS.</summary></entry><entry><title type="html">Monitor Restic backups on Kubernetes</title><link href="https://zonca.dev/2022/04/monitor-restic-backups-kubernetes.html" rel="alternate" type="text/html" title="Monitor Restic backups on Kubernetes" /><published>2022-04-27T00:00:00-05:00</published><updated>2022-04-27T00:00:00-05:00</updated><id>https://zonca.dev/2022/04/monitor-restic-backups-kubernetes</id><content type="html" xml:base="https://zonca.dev/2022/04/monitor-restic-backups-kubernetes.html">&lt;p&gt;For one of my production JupyterHub deployments on Kubernetes, I have setup an automated
system to perform nightly backup of the user data, see &lt;a href=&quot;https://zonca.dev/2021/04/jetstream-backup-kubernetes-volumes-object-store.html&quot;&gt;the full tutorial on how to set it up&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The system writes the backups to Object store using &lt;a href=&quot;https://restic.net/&quot;&gt;Restic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this tutorial I’ll provide the configuration to have a CronJob on Kubernetes checking how old are the backups and be alerted if anything is not working using Healthchecks.io.&lt;/p&gt;

&lt;p&gt;Healthchecks.io is a free service that gives you a URL endpoint you should regularly send a GET request to, for example from a bash script, if they don’t receive a ping after a configurable amount of hours, they send an email.&lt;/p&gt;

&lt;h2 id=&quot;setup-the-system&quot;&gt;Setup the system&lt;/h2&gt;

&lt;p&gt;First register for a free account at &lt;a href=&quot;https://healthchecks.io&quot;&gt;https://healthchecks.io&lt;/a&gt;, configure an endpoint and get the related URL.&lt;/p&gt;

&lt;p&gt;Checkout my usual &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zonca/jupyterhub-deploy-kubernetes-jetstream&lt;/code&gt; repository from Github, enter the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;backup_volumes&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Make sure you have the Restic password and the AWS-style credentials saved in text files in the same folder, make sure there is no newline at the end of the files (use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vim -b&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:set noeol&lt;/code&gt;, yes, this is a reminder for myself).&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash create_aws_secret.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then enter the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;backup_volumes/monitor&lt;/code&gt; subfolder:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cronjob.yaml&lt;/code&gt; and enter your Healthchecks.io URL&lt;/li&gt;
  &lt;li&gt;Run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;backup_is_current.sh&lt;/code&gt; script locally to make sure it works properly&lt;/li&gt;
  &lt;li&gt;Run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create_configmap_scripts.sh&lt;/code&gt; bash script to load the previous script into Kubernetes as a configmap&lt;/li&gt;
  &lt;li&gt;Modify the schedule in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cronjob.yaml&lt;/code&gt; to “* * * * *”, so every minute it has a chance to run correctly&lt;/li&gt;
  &lt;li&gt;Finally run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl apply -f cronjob.yaml&lt;/code&gt; to create the CronJob&lt;/li&gt;
  &lt;li&gt;Debug until it works!&lt;/li&gt;
  &lt;li&gt;If you login to Healthchecks.io, you should see the GET requests coming in every minute.&lt;/li&gt;
  &lt;li&gt;Relax, you’ll be notified if backups stop working for any reason.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="jetstream" /><category term="kubernetes" /><summary type="html">For one of my production JupyterHub deployments on Kubernetes, I have setup an automated system to perform nightly backup of the user data, see the full tutorial on how to set it up.</summary></entry><entry><title type="html">Jetstream2 SU calculator</title><link href="https://zonca.dev/2022/04/jetstream2-su-calculator.html" rel="alternate" type="text/html" title="Jetstream2 SU calculator" /><published>2022-04-15T00:00:00-05:00</published><updated>2022-04-15T00:00:00-05:00</updated><id>https://zonca.dev/2022/04/jetstream2-su-calculator</id><content type="html" xml:base="https://zonca.dev/2022/04/jetstream2-su-calculator.html">&lt;p&gt;Jupyter Notebook to compute daily, monthly, yearly consumption of SU based on the number and type of Virtual Machines:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/zonca/3cc70af86d24a0bcc176f2b18d0cc9dd#file-jetstream2_su_calculator-ipynb&quot;&gt;https://gist.github.com/zonca/3cc70af86d24a0bcc176f2b18d0cc9dd#file-jetstream2_su_calculator-ipynb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run in the browser via Google Colab:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://colab.research.google.com/gist/zonca/3cc70af86d24a0bcc176f2b18d0cc9dd/jetstream2_su_calculator.ipynb&quot;&gt;https://colab.research.google.com/gist/zonca/3cc70af86d24a0bcc176f2b18d0cc9dd/jetstream2_su_calculator.ipynb&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="jetstream2" /><summary type="html">Jupyter Notebook to compute daily, monthly, yearly consumption of SU based on the number and type of Virtual Machines:</summary></entry><entry><title type="html">Custos authentication for JupyterHub</title><link href="https://zonca.dev/2022/04/jupyterhub-custos-authentication.html" rel="alternate" type="text/html" title="Custos authentication for JupyterHub" /><published>2022-04-13T00:00:00-05:00</published><updated>2022-04-13T00:00:00-05:00</updated><id>https://zonca.dev/2022/04/jupyterhub-custos-authentication</id><content type="html" xml:base="https://zonca.dev/2022/04/jupyterhub-custos-authentication.html">&lt;p&gt;&lt;a href=&quot;https://airavata.apache.org/custos/&quot;&gt;Custos&lt;/a&gt; is a security middleware used to
authenticate users to Airavata-based Science Gateways.
It is relevant to the Science Gateways community to unify authentication and also
authenticate users to JupyterHub using the same framework.&lt;/p&gt;

&lt;p&gt;Custos is a hosted solution managed by Indiana University, therefore it has no maintenance burden
and supports CILogon so that users can login with credentials from almost all US Higher Education
Institutions.&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;p&gt;I have been testing on Jetstream 2, however it should work easily on any Kubernetes deployment.
If you also are testing on Jetstream 2, you can follow my previous tutorials to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://zonca.dev/2022/03/kubernetes-jetstream2-kubespray.html&quot;&gt;Deploy Kubernetes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zonca.dev/2022/03/jetstream2-jupyterhub.html&quot;&gt;Deploy JupyterHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zonca.dev/2020/03/setup-https-kubernetes-letsencrypt.html&quot;&gt;Deploy Cert-Manager for SSL support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;configure-custos&quot;&gt;Configure Custos&lt;/h2&gt;

&lt;p&gt;First you can request a new tenant on the Custos hosted service, for testing you can use the development version at:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dev.portal.usecustos.org/&quot;&gt;https://dev.portal.usecustos.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;then, for production, switch to:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://portal.usecustos.org/&quot;&gt;https://portal.usecustos.org/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Login with CILogon (I tested using my XSEDE account)&lt;/li&gt;
  &lt;li&gt;Click on create new tenant&lt;/li&gt;
  &lt;li&gt;Redirect url &lt;a href=&quot;https://your.jupyterhub.com/hub/oauth_callback&quot;&gt;https://your.jupyterhub.com/hub/oauth_callback&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Domain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;your.jupyterhub.com&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Client URI &lt;a href=&quot;https://your.jupyterhub.com&quot;&gt;https://your.jupyterhub.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Logo URI, anything, for example I used my Github avatar&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After having completed the process, you should see that your tenant is in the “Requested” state,
wait for the Custos admins to approve it.&lt;/p&gt;

&lt;h2 id=&quot;configure-jupyterhub&quot;&gt;Configure JupyterHub&lt;/h2&gt;

&lt;p&gt;Custom authenticators for JupyterHub need to be installed in the Docker image used to run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hub&lt;/code&gt; pod.
The Custos Authenticator for JupyterHub has &lt;a href=&quot;https://pypi.org/project/custos-jupyterhub-authenticator/&quot;&gt;a package on PyPI&lt;/a&gt; so it is easy to add it to the JupyterHub image.
See &lt;a href=&quot;https://github.com/jupyterhub/zero-to-jupyterhub-k8s/issues/2265&quot;&gt;this issue on zero-to-jupyterhub for more details&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Custos developers maintain Docker images which have this patch already applied, see the &lt;a href=&quot;https://hub.docker.com/r/apachecustos/jupyter-hub-k8/tags&quot;&gt;repository on DockerHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We can therefore modify the JupyterHub configuration (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config_standard_storage.yaml&lt;/code&gt; in my tutorials) and add:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hub:
  image:
    name: apachecustos/jupyter-hub-k8
    tag: 1.2.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Consider that this will need to be updated if we change the version of the Helm recipe (currently 1.2.0).&lt;/p&gt;

&lt;h2 id=&quot;configure-the-custos-authenticator&quot;&gt;Configure the Custos Authenticator&lt;/h2&gt;

&lt;p&gt;Once the Custos tenant has been approved, we can proceed to configure JupyterHub with the right credentials,
again, modify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config_standard_storage.yaml&lt;/code&gt; to add:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hub:
  extraConfig:
      00-custos: |
        from custosauthenticator.custos import CustosOAuthenticator
        c.JupyterHub.authenticator_class = CustosOAuthenticator
        c.CustosOAuthenticator.oauth_callback_url = &quot;https://your.jupyterhub.com/hub/oauth_callback&quot;
        c.CustosOAuthenticator.client_id = &quot;custos-xxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;
        c.CustosOAuthenticator.client_secret = &quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;
        c.CustosOAuthenticator.login_service = &quot;Custos Login&quot;
        c.CustosOAuthenticator.custos_host= &quot;custos.scigap.org&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally you can test in your browser, you probably need to test with an account different than the one you used to setup the tenant, so for example if you used XSEDE, now use CILogon with your institution or use ORCID.&lt;/p&gt;

&lt;p&gt;With this default configuration, any user that can login to Custos can also login to JupyterHub, so if you already have permissions setup for your Custos gateway, those will be also applied to JupyterHub.&lt;/p&gt;

&lt;h2 id=&quot;work-in-progress&quot;&gt;Work in progress&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apache/airavata-custos/issues/265&quot;&gt;Understand if we can login with owner account of tenant&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apache/airavata-custos/issues/264&quot;&gt;Fix the logout button&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="kubernetes" /><category term="openstack" /><category term="jetstream2" /><category term="jupyterhub" /><summary type="html">Custos is a security middleware used to authenticate users to Airavata-based Science Gateways. It is relevant to the Science Gateways community to unify authentication and also authenticate users to JupyterHub using the same framework.</summary></entry><entry><title type="html">Science Gateway with Dask and Zarr</title><link href="https://zonca.dev/2022/04/science-gateway-dask-zarr.html" rel="alternate" type="text/html" title="Science Gateway with Dask and Zarr" /><published>2022-04-05T00:00:00-05:00</published><updated>2022-04-05T00:00:00-05:00</updated><id>https://zonca.dev/2022/04/science-gateway-dask-zarr</id><content type="html" xml:base="https://zonca.dev/2022/04/science-gateway-dask-zarr.html">&lt;p&gt;This material was presented on April 2022 at the &lt;a href=&quot;https://sciencegateways.org/minigateways2022&quot;&gt;MiniGateways 2022 conference&lt;/a&gt; organized by the wonderful Science Gateways Community Institute (SGCI).&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/6S1_T3se828&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;See the slides and the abstract on &lt;a href=&quot;https://doi.org/10.6084/m9.figshare.19674516.v1&quot;&gt;Figshare&lt;/a&gt;, please also cite the Figshare record if you are referencing this material.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will glue several intersting technologies together to show a toy Science Gateway deployment which runs inside Kubernetes, uses Dask to scale up distributed computations across multiple workers and writes output data to Object store using the Zarr format.&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://zonca.dev/2022/03/kubernetes-jetstream2-kubespray.html&quot;&gt;Kubernetes deployment on Jetstream 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Optionally have &lt;a href=&quot;https://zonca.dev/2022/03/jetstream2-jupyterhub.html&quot;&gt;JupyterHub installed as well to interact with the gateway locally&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zonca.dev/2022/04/dask-gateway-jupyterhub.html&quot;&gt;Dask Gateway to handle Dask clusters&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;AWS style credentials for writing to object store, see &lt;a href=&quot;https://zonca.dev/2022/04/zarr-jetstream2.html&quot;&gt;the tutorial about Zarr on Jetstream 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;

&lt;h2 id=&quot;authentication&quot;&gt;Authentication&lt;/h2&gt;

&lt;p&gt;As usual first checkout the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zonca/jupyterhub-deploy-kubernetes-jetstream&lt;/code&gt; repository.&lt;/p&gt;

&lt;p&gt;Dask gateway has been deployed with JupyterHub based autentication, therefore we need to create a Token from the JupyterHub control panel at &lt;a href=&quot;https://jupyterhub-address.edu/hub/token&quot;&gt;https://jupyterhub-address.edu/hub/token&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Request a new token with no expiration named for example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gatewaydaskzarr&lt;/code&gt;, then save it into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_aws_config&lt;/code&gt; file, the same used for the AWS credentials:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jhub_token=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We need to provide AWS credentials both to the gateway application and to the dask workers, so we store them in a Kubernetes Secret:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd gateway-dask-zarr
bash create_secret.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We then configure Dask Gateway so it mounts this secret into the workers, add:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;c.KubeClusterConfig.worker_extra_container_config = {
            &quot;envFrom&quot;: [
                        {&quot;secretRef&quot;: {&quot;name&quot;: &quot;awsconfig&quot;}}
                            ]
                        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask_gateway/config_dask-gateway.yaml&lt;/code&gt; and redeploy Dask Gateway with Helm.&lt;/p&gt;

&lt;h2 id=&quot;deploy-the-gateway&quot;&gt;Deploy the gateway&lt;/h2&gt;

&lt;p&gt;The gateway itself is a toy Flask app, see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gateway.py&lt;/code&gt; file in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gateway-dask-zarr&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;We can create a Kubernetes Deployment with:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl create -f deploy_gateway.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;It pulls the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zonca/gateway-dask-zarr:latest&lt;/code&gt; which has been build with the &lt;a href=&quot;https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream/blob/master/gateway-dask-zarr/Dockerfile&quot;&gt;Dockerfile in the gateway-dask-zarr folder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;It mounts the secret with AWS and JupyterHub credentials&lt;/li&gt;
  &lt;li&gt;In the initialization phase it creates a Dask cluster with 3 workers that will be used for all the jobs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can test that the deployment has been successful by logging in to the JupyterHub deployment on Jetstream and running the first cells of &lt;a href=&quot;https://gist.github.com/9b65ecde689c30f765688c4bbbf93a62&quot;&gt;this notebook on Gist&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;run-jobs&quot;&gt;Run jobs&lt;/h2&gt;

&lt;p&gt;Running the following cells in the test notebook above we can launch a job, every time we send a get request to the URL:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://gateway-svc/submit_job/&amp;lt;job_id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;the gateway:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gets a “Client” instance connected to the Dask cluster&lt;/li&gt;
  &lt;li&gt;Prepares a 1000x1000 Zarr array with 100 chunks of size 100x100&lt;/li&gt;
  &lt;li&gt;Instructs the 3 Dask workers to create a random array distributely&lt;/li&gt;
  &lt;li&gt;Instructs the 3 Dask workers to write that array concurrently to Object Store as a Zarr file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore no computation is executed in the Flask App, it is offloaded to the Dask workers. Data transfer as well directly flows from the workers to Object Store.&lt;/p&gt;

&lt;h2 id=&quot;inspect-the-results&quot;&gt;Inspect the results&lt;/h2&gt;

&lt;p&gt;Finally, in the same notebook, we can access Object Store directly, load and plot the data.&lt;/p&gt;</content><author><name></name></author><category term="kubernetes" /><category term="openstack" /><category term="jetstream2" /><category term="jupyterhub" /><category term="dask" /><summary type="html">This material was presented on April 2022 at the MiniGateways 2022 conference organized by the wonderful Science Gateways Community Institute (SGCI).</summary></entry><entry><title type="html">Use the distributed file format Zarr on Jetstream 2 object storage</title><link href="https://zonca.dev/2022/04/zarr-jetstream2.html" rel="alternate" type="text/html" title="Use the distributed file format Zarr on Jetstream 2 object storage" /><published>2022-04-04T18:00:00-05:00</published><updated>2022-04-04T18:00:00-05:00</updated><id>https://zonca.dev/2022/04/zarr-jetstream2</id><content type="html" xml:base="https://zonca.dev/2022/04/zarr-jetstream2.html">&lt;h2 id=&quot;zarr&quot;&gt;Zarr&lt;/h2&gt;

&lt;p&gt;Zarr is a file format designed for cloud computing, see &lt;a href=&quot;http://zarr.readthedocs.io&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Zarr is also supported by &lt;a href=&quot;http://dask.pydata.org&quot;&gt;dask&lt;/a&gt;, the parallel computing framework for Python,
and the Dask team implemented storage backends for &lt;a href=&quot;https://github.com/dask/gcsfs&quot;&gt;Google Cloud Storage&lt;/a&gt; and
&lt;a href=&quot;https://github.com/dask/s3fs&quot;&gt;Amazon S3&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;use-openstack-swift-on-jetstream-for-object-storage&quot;&gt;Use OpenStack swift on Jetstream for object storage&lt;/h2&gt;

&lt;p&gt;Jetstream 2, like Jetstream 1, offers access to object storage via OpenStack Swift.
This is a separate service from the Jetstream Virtual Machines, so you do not need to spin
any Virtual Machine dedicated to storing the data but just use the object storage already
provided by Jetstream. When you ask for an allocation, you can ask for volume storage and object store storage.&lt;/p&gt;

&lt;h2 id=&quot;read-zarr-files-from-object-store&quot;&gt;Read Zarr files from object store&lt;/h2&gt;

&lt;p&gt;If somebody else has already made available some files on object store and set their visibility
to “public”, anybody can read them.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;https://gist.github.com/4172aab52ef0cc12623364765e0030f5&quot;&gt;example Notebook to read Zarr files&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OpenStack Swift already provides an endpoint which has an interface compatible with Amazon S3, therefore
we can directly use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S3FileSystem&lt;/code&gt; provided by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s3fs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we can build a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S3Map&lt;/code&gt; object which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zarr&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask.array&lt;/code&gt; can access.&lt;/p&gt;

&lt;p&gt;In this example I am using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;distributed&lt;/code&gt; scheduler on a single node, you can scale up your computation
having workers distributed on multiple nodes, just make sure that all the workers have access to the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zarr&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s3fs&lt;/code&gt; packages.&lt;/p&gt;

&lt;h2 id=&quot;write-zarr-files-or-read-private-files&quot;&gt;Write Zarr files or read private files&lt;/h2&gt;

&lt;p&gt;In this case we need authentication.&lt;/p&gt;

&lt;p&gt;First you need to ask to the XSEDE helpdesk API access to Jetstream, this also gives access
to the Horizon interface, which has many advanced features that are not available in Atmosphere.&lt;/p&gt;

&lt;h3 id=&quot;create-a-bucket&quot;&gt;Create a bucket&lt;/h3&gt;

&lt;p&gt;Object store systems are organized on buckets, which are like root folders of our filesystem.
From the Horizon interface, we can choose Object Store -&amp;gt; Containers (quite confusing way of referring to buckets in OpenStack).
Here we can check content of existing buckets or create a new one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make sure you create the bucket on the right project&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;get-credentials&quot;&gt;Get credentials&lt;/h3&gt;

&lt;p&gt;Once you have Jetstream 2 application credentials on your system,
you can first test you can check the content of the bucket we created above:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openstack object list my_bucket
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now create ec2 credentials with:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openstack ec2 credentials create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is going to display AWS access key and AWS secret, we can save credentials in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.aws/credentials&lt;/code&gt;
in the machine we want then use to write to object store.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[default]
region=RegionOne
aws_access_key_id=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
aws_secret_access_key=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;test-access&quot;&gt;Test access&lt;/h3&gt;

&lt;p&gt;We can check if we can successfully login using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s3fs&lt;/code&gt;, notice we &lt;strong&gt;do not use&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;anon=True&lt;/code&gt; as
we did before:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import s3fs
fs = s3fs.S3FileSystem(client_kwargs=dict(endpoint_url=&quot;https://js2.jetstream-cloud.org:8001/&quot;))
fs.ls(&quot;my_bucket&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;generate-a-file-and-write-it-to-object-store&quot;&gt;Generate a file and write it to object store&lt;/h3&gt;

&lt;p&gt;See a &lt;a href=&quot;https://gist.github.com/33b51f74d9252cc3e5d18d290393c33c&quot;&gt;Notebook example of creating a random array in dask and saving it in Zarr format to Object Store&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="jupyter" /><category term="jetstream2" /><category term="zarr" /><summary type="html">Zarr</summary></entry><entry><title type="html">Deploy Dask Gateway with JupyterHub on Kubernetes</title><link href="https://zonca.dev/2022/04/dask-gateway-jupyterhub.html" rel="alternate" type="text/html" title="Deploy Dask Gateway with JupyterHub on Kubernetes" /><published>2022-04-04T00:00:00-05:00</published><updated>2022-04-04T00:00:00-05:00</updated><id>https://zonca.dev/2022/04/dask-gateway-jupyterhub</id><content type="html" xml:base="https://zonca.dev/2022/04/dask-gateway-jupyterhub.html">&lt;p&gt;&lt;strong&gt;Updated 28 April 2022&lt;/strong&gt;: switched to Dask Gateway 2022.4.0&lt;/p&gt;

&lt;p&gt;In this tutorial we will install &lt;a href=&quot;https://gateway.dask.org/index.html&quot;&gt;Dask Gateway&lt;/a&gt; on Kubernetes and configure JupyterHub so
Jupyter Notebook users can launch private Dask cluster and connect to them.&lt;/p&gt;

&lt;p&gt;I assume to start from a Kubernetes cluster already running and
JupyterHub deployed on top of it via Helm. And SSL encryption also activated (it isn’t probably necessary, but I haven’t tested that).
I tested on Jetstream 2, but the recipe should be agnostic of that.&lt;/p&gt;

&lt;h2 id=&quot;preparation&quot;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;Clone on the machine you use to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;helm&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; the repository
with the configuration files and scripts:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then you need to setup one API token, create it with:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl rand -hex 32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then paste it both in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask_gateway/config_jupyterhub.yaml&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask_gateway/config_dask-gateway.yaml&lt;/code&gt;,
look for the string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TOKEN&lt;/code&gt; and replace it.&lt;/p&gt;

&lt;h2 id=&quot;launch-dask-gateway&quot;&gt;Launch dask gateway&lt;/h2&gt;

&lt;p&gt;We can install version 2022.4.0 with:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bash install_dask-gateway.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You might want to check &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config_dask-gateway.yaml&lt;/code&gt; for extra configuration options, but for initial setup and testing it shouldn’t be necessary.&lt;/p&gt;

&lt;p&gt;After this you should see the 3 dask gateway pods running, e.g.:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl -n jhub get pods
NAME                                       READY   STATUS    RESTARTS   AGE
api-dask-gateway-64bf5db96c-4xfd6          1/1     Running   2          23m
controller-dask-gateway-7674bd545d-cwfnx   1/1     Running   0          23m
traefik-dask-gateway-5bbd68c5fd-5drm8      1/1     Running   0          23m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;modify-the-jupyterhub-configuration&quot;&gt;Modify the JupyterHub configuration&lt;/h2&gt;

&lt;p&gt;Only 2 options need to be changed in JupyterHub:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We need to run a image which has the same version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask-gateway&lt;/code&gt; we installed on Kubernetes (currently &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.9.0&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;We need to proxy &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask-gateway&lt;/code&gt; through JupyterHub so the users can access the Dask dashboard&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are using my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install_jhub.sh&lt;/code&gt; script to deploy JupyterHub,
you can modify it and add another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;values&lt;/code&gt; option at the end, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--values dask_gateway/config_jupyterhub.yaml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can modify the image you are using for Jupyterhub in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask_gateway/config_jupyterhub.yaml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To assure that there are not compatibility issues, the “Client” (JupyterHub session), the dask gateway server, the scheduler and the workers should all have the same version of Python and the same version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;distributed&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask_gateway&lt;/code&gt;. If this is not possible, you can test different combinations and they might work.&lt;/p&gt;

&lt;p&gt;Then redeploy JupyterHub:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash install_jhub.sh &amp;amp;&amp;amp; cd dask_gateway &amp;amp;&amp;amp; bash install_dask-gateway.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check that the service is working correctly,
if open a browser tab and access &lt;a href=&quot;https://js-XXX-YYY.jetstream-cloud.org/services/dask-gateway/api/health&quot;&gt;https://js-XXX-YYY.jetstream-cloud.org/services/dask-gateway/api/health&lt;/a&gt;, you should see:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{&quot;status&quot;: &quot;pass&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If this is not working, you can open login to JupyterHub, get a terminal and first check if the service is working:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;  curl http://traefik-dask-gateway/services/dask-gateway/api/health
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Should give:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{&quot;status&quot;: &quot;pass&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-a-dask-cluster&quot;&gt;Create a dask cluster&lt;/h2&gt;

&lt;p&gt;You can now login to JupyterHub and check you can connect properly to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dask-gateway&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dask_gateway&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gateway&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gateway&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://traefik-dask-gateway/services/dask-gateway/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;public_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://js-XXX-YYY.jetstream-cloud.org/services/dask-gateway/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jupyterhub&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_clusters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then create a cluster and use it:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;cluster&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_cluster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Client is a standard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;distributed&lt;/code&gt; client and all subsequent calls to dask will go
through the cluster.&lt;/p&gt;

&lt;p&gt;Printing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cluster&lt;/code&gt; object gives the link to the Dask dashboard.&lt;/p&gt;

&lt;p&gt;For a full example and screenshots of the widgets and of the dashboard see:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/zonca/355a7ec6b5bd3f84b1413a8c29fbc877&quot;&gt;https://gist.github.com/zonca/355a7ec6b5bd3f84b1413a8c29fbc877&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Click on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Raw&lt;/code&gt; button to download notebook and upload it to your session).&lt;/p&gt;</content><author><name></name></author><category term="kubernetes" /><category term="openstack" /><category term="jetstream2" /><category term="jupyterhub" /><category term="dask" /><summary type="html">Updated 28 April 2022: switched to Dask Gateway 2022.4.0</summary></entry><entry><title type="html">Deploy JupyterHub on Jetstream 2 on top of Kubernetes</title><link href="https://zonca.dev/2022/03/jetstream2-jupyterhub.html" rel="alternate" type="text/html" title="Deploy JupyterHub on Jetstream 2 on top of Kubernetes" /><published>2022-03-31T00:00:00-05:00</published><updated>2022-03-31T00:00:00-05:00</updated><id>https://zonca.dev/2022/03/jetstream2-jupyterhub</id><content type="html" xml:base="https://zonca.dev/2022/03/jetstream2-jupyterhub.html">&lt;p&gt;This tutorial is a followup to: &lt;a href=&quot;&quot;&gt;Deploy Kubernetes on Jetstream 2 with Kubespray 2.18.0&lt;/a&gt;, so I’ll assume Kubernetes is already deployed with a default storageclass.&lt;/p&gt;

&lt;h2 id=&quot;clone-the-configuration-files-repository&quot;&gt;Clone the configuration files repository&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the main repository which contains configuration files for all the tutorials I write,
I usually always work with this folder as the root folder.&lt;/p&gt;

&lt;h2 id=&quot;install-jupyterhub&quot;&gt;Install Jupyterhub&lt;/h2&gt;

&lt;p&gt;Inside the repository root, first run&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash create_secrets.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to create the secret strings needed by JupyterHub then edit its output
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secrets.yaml&lt;/code&gt; to make sure it is consistent, edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hosts&lt;/code&gt; lines if needed. For example, at the moment Jetstream 2 doesn’t yet provide DNS entries like Jetstream 1 did (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js-XXX-YYY.jetstream-cloud.org&lt;/code&gt;, they are working on it, I’ll update the tutorial when it comes available), so you will need to create a A record that points to the IP of the master node. Most universities offer this service.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash configure_helm_jupyterhub.sh
kubectl create namespace jhub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The newest Kubespray version doesn’t install the CSI driver on the master node, so we cannot run the Hub pod on the master node, I have therefore removed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nodeSelector&lt;/code&gt; and tolerances I had on the configuration for Jetstream 1.&lt;/p&gt;

&lt;p&gt;In any case, the Kubernetes ingress automatically handles network routing.&lt;/p&gt;

&lt;p&gt;Finally run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;helm&lt;/code&gt; to install JupyterHub:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash install_jhub.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is installing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zero-to-jupyterhub&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.2.0&lt;/code&gt;, you can check &lt;a href=&quot;https://github.com/jupyterhub/zero-to-jupyterhub-k8s/releases&quot;&gt;on the zero-to-jupyterhub release page&lt;/a&gt; if a newer version is available, generally transitioning to new releases is painless, they document any breaking changes very well.&lt;/p&gt;

&lt;p&gt;Check pods running with:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl get pods -n jhub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proxy&lt;/code&gt; is running, even if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hub&lt;/code&gt; is still in preparation, you can check
in browser, you should get “Service Unavailable” which is a good sign that
the proxy is working.&lt;/p&gt;

&lt;p&gt;You can finally connect with your browser to the domain you have configured and
check if the Hub is working fine, after that, the pods running using:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl get pods -n jhub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;shoud be:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NAME                              READY   STATUS    RESTARTS   AGE
continuous-image-puller-xlkf6     1/1     Running   0          18m
hub-554bf64f9b-kc2h9              1/1     Running   0          2m26s
jupyter-zonca                     1/1     Running   0          12s
proxy-567d5d9f8d-jr4k9            1/1     Running   0          18m
user-scheduler-79c85f98dd-jpl9l   1/1     Running   0          18m
user-scheduler-79c85f98dd-sg78t   1/1     Running   0          18m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;customize-jupyterhub&quot;&gt;Customize JupyterHub&lt;/h2&gt;

&lt;p&gt;After JupyterHub is deployed and integrated with Cinder for persistent volumes,
for any other customizations, first authentication, you are in good hands as the
&lt;a href=&quot;https://zero-to-jupyterhub.readthedocs.io/en/stable/extending-jupyterhub.html&quot;&gt;Zero-to-Jupyterhub documentation&lt;/a&gt; is great.&lt;/p&gt;

&lt;h2 id=&quot;setup-https-with-letsencrypt&quot;&gt;Setup HTTPS with letsencrypt&lt;/h2&gt;

&lt;p&gt;Kubespray has the option of deploying also &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cert-manager&lt;/code&gt;, but I had trouble deploying an issuer,
it was easier to just deploy it afterwards following &lt;a href=&quot;https://zonca.dev/2020/03/setup-https-kubernetes-letsencrypt.html&quot;&gt;my previous tutorial&lt;/a&gt;, recently updated.&lt;/p&gt;

&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;/h2&gt;

&lt;p&gt;Feedback on this is very welcome, please open an issue on the &lt;a href=&quot;https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream&quot;&gt;Github repository&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="kubernetes" /><category term="jupyterhub" /><category term="jetstream2" /><summary type="html">This tutorial is a followup to: Deploy Kubernetes on Jetstream 2 with Kubespray 2.18.0, so I’ll assume Kubernetes is already deployed with a default storageclass.</summary></entry></feed>